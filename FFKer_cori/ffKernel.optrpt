Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) Fortran Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 17.0.3.191 Build 20170404

Compiler options: -I/opt/cray/pe/libsci/17.06.1/INTEL/16.0/x86_64/include -I/opt/cray/pe/mpt/7.6.0/gni/mpich-intel/16.0/include -I/opt/cray/rca/2.2.15-6.0.4.1_13.1__g46acb0f.ari/include -I/opt/cray/alps/6.4.1-6.0.4.0_7.2__g86d0f3d.ari/include -I/opt/cray/xpmem/2.2.2-6.0.4.0_3.1__g43b0535.ari/include -I/opt/cray/gni-headers/5.0.11-6.0.4.0_7.2__g7136988.ari/include -I/opt/cray/pe/pmi/5.0.12/include -I/opt/cray/ugni/6.0.14-6.0.4.0_14.1__ge7db4a2.ari/include -I/opt/cray/udreg/2.3.2-6.0.4.0_12.2__g2f9c3ee.ari/include -I/opt/cray/wlm_detect/1.2.1-6.0.4.0_22.1__gd26a3dc.ari/include -I/opt/cray/krca/2.2.2-6.0.4.0_5.2__g4614cf3.ari/include -I/opt/cray-hss-devel/8.0.0/include -xCORE-AVX2 -static -D__CRAYXC -D__CRAY_HASWELL -D__CRAYXT_COMPUTE_LINUX_TARGET -c -O3 -qopt-report=5 -g -qopenmp -xCORE-AVX2

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: FFKERNEL

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (FFKERNEL) [1/2=50.0%] ffKernel.f90(18,9)
  -> EXTERN: (18,9) for_set_reentrancy
  -> EXTERN: (64,13) omp_get_thread_num_
  -> EXTERN: (66,20) omp_get_num_threads_
  -> EXTERN: (67,9) for_write_seq_lis
  -> EXTERN: (67,9) for_write_seq_lis_xmit
  -> EXTERN: (71,12) for_getarg
  -> EXTERN: (72,7) for_read_int_lis
  -> EXTERN: (73,12) for_getarg
  -> EXTERN: (74,7) for_read_int_lis
  -> EXTERN: (75,12) for_getarg
  -> EXTERN: (76,7) for_read_int_lis
  -> EXTERN: (77,12) for_getarg
  -> EXTERN: (78,7) for_read_int_lis
  -> EXTERN: (79,12) for_getarg
  -> EXTERN: (80,7) for_read_int_lis
  -> EXTERN: (81,12) for_getarg
  -> EXTERN: (82,7) for_read_int_lis
  -> EXTERN: (84,7) for_write_seq_lis_xmit
  -> EXTERN: (84,7) for_write_seq_lis
  -> EXTERN: (85,7) for_write_seq_lis_xmit
  -> EXTERN: (85,7) for_write_seq_lis
  -> EXTERN: (86,7) for_write_seq_lis_xmit
  -> EXTERN: (86,7) for_write_seq_lis
  -> EXTERN: (87,7) for_write_seq_lis_xmit
  -> EXTERN: (87,7) for_write_seq_lis
  -> EXTERN: (88,7) for_write_seq_lis_xmit
  -> EXTERN: (88,7) for_write_seq_lis
  -> EXTERN: (89,7) for_write_seq_lis_xmit
  -> EXTERN: (89,7) for_write_seq_lis
  -> EXTERN: (99,7) for_alloc_allocatable
  -> EXTERN: (99,7) for_check_mult_overflow64
  -> EXTERN: (102,7) for_alloc_allocatable
  -> EXTERN: (102,7) for_check_mult_overflow64
  -> EXTERN: (109,7) for_write_seq_lis_xmit
  -> EXTERN: (109,7) for_write_seq_lis_xmit
  -> EXTERN: (109,7) for_write_seq_lis
  -> EXTERN: (110,7) for_alloc_allocatable
  -> EXTERN: (110,7) for_check_mult_overflow64
  -> EXTERN: (111,7) for_alloc_allocatable
  -> EXTERN: (111,7) for_check_mult_overflow64
  -> EXTERN: (115,7) for_write_seq_lis_xmit
  -> EXTERN: (115,7) for_write_seq_lis_xmit
  -> EXTERN: (115,7) for_write_seq_lis
  -> EXTERN: (116,7) for_alloc_allocatable
  -> EXTERN: (116,7) for_check_mult_overflow64
  -> EXTERN: (118,7) for_alloc_allocatable
  -> EXTERN: (118,7) for_check_mult_overflow64
  -> EXTERN: (121,7) for_write_seq_lis_xmit
  -> EXTERN: (121,7) for_write_seq_lis_xmit
  -> EXTERN: (121,7) for_write_seq_lis
  -> EXTERN: (122,7) for_alloc_allocatable
  -> EXTERN: (122,7) for_check_mult_overflow64
  -> EXTERN: (123,7) for_alloc_allocatable
  -> EXTERN: (123,7) for_check_mult_overflow64
  -> EXTERN: (125,7) for_alloc_allocatable
  -> EXTERN: (125,7) for_check_mult_overflow64
  -> EXTERN: (126,7) for_alloc_allocatable
  -> EXTERN: (126,7) for_check_mult_overflow64
  -> EXTERN: (128,7) for_alloc_allocatable
  -> EXTERN: (128,7) for_check_mult_overflow64
  -> EXTERN: (135,7) for_alloc_allocatable
  -> EXTERN: (135,7) for_check_mult_overflow64
  -> EXTERN: (146,7) for_alloc_allocatable
  -> EXTERN: (146,7) for_check_mult_overflow64
  -> EXTERN: (149,7) for_alloc_allocatable
  -> EXTERN: (149,7) for_check_mult_overflow64
  -> EXTERN: (151,7) for_alloc_allocatable
  -> EXTERN: (151,7) for_check_mult_overflow64
  -> EXTERN: (153,7) for_alloc_allocatable
  -> EXTERN: (153,7) for_check_mult_overflow64
  -> EXTERN: (155,7) for_alloc_allocatable
  -> EXTERN: (155,7) for_check_mult_overflow64
  -> EXTERN: (157,7) for_alloc_allocatable
  -> EXTERN: (157,7) for_check_mult_overflow64
  -> EXTERN: (159,7) for_alloc_allocatable
  -> EXTERN: (159,7) for_check_mult_overflow64
  -> EXTERN: (161,7) for_alloc_allocatable
  -> EXTERN: (161,7) for_check_mult_overflow64
  -> EXTERN: (163,7) for_alloc_allocatable
  -> EXTERN: (163,7) for_check_mult_overflow64
  -> EXTERN: (165,7) for_alloc_allocatable
  -> EXTERN: (165,7) for_check_mult_overflow64
  -> EXTERN: (167,7) for_alloc_allocatable
  -> EXTERN: (167,7) for_check_mult_overflow64
  -> EXTERN: (170,7) for_alloc_allocatable
  -> EXTERN: (170,7) for_check_mult_overflow64
  -> EXTERN: (172,7) for_alloc_allocatable
  -> EXTERN: (172,7) for_check_mult_overflow64
  -> EXTERN: (187,7) for_write_seq_lis
  -> (189,12) TIMGET (isz = 32) (sz = 37)
     [[ Inlining inhibited by overrideable criterion  <1>]]
  -> (201,14) TIMGET (isz = 32) (sz = 37)
     [[ Inlining inhibited by overrideable criterion  <1>]]
  -> (221,14) TIMGET (isz = 32) (sz = 37)
     [[ Inlining inhibited by overrideable criterion  <1>]]
  -> (226,14) TIMGET (isz = 32) (sz = 37)
     [[ Inlining inhibited by overrideable criterion  <1>]]
  -> (330,14) TIMGET (isz = 32) (sz = 37)
     [[ Inlining inhibited by overrideable criterion  <1>]]
  -> (336,14) TIMGET (isz = 32) (sz = 37)
     [[ Inlining inhibited by overrideable criterion  <1>]]
  -> (339,14) TIMGET (isz = 32) (sz = 37)
     [[ Inlining inhibited by overrideable criterion  <1>]]
  -> (345,14) TIMGET (isz = 32) (sz = 37)
     [[ Inlining inhibited by overrideable criterion  <1>]]
  -> EXTERN: (390,28) log
  -> EXTERN: (396,29) log
  -> (408,14) TIMGET (isz = 32) (sz = 37)
     [[ Inlining inhibited by overrideable criterion  <1>]]
  -> (410,14) TIMGET (isz = 32) (sz = 37)
     [[ Inlining inhibited by overrideable criterion  <1>]]
  -> (497,14) TIMGET (isz = 32) (sz = 37)
     [[ Inlining inhibited by overrideable criterion  <1>]]
  -> (511,12) TIMGET (isz = 32) (sz = 37)
     [[ Inlining inhibited by overrideable criterion  <1>]]
  -> EXTERN: (513,7) for_dealloc_allocatable
  -> EXTERN: (514,7) for_dealloc_allocatable
  -> EXTERN: (515,7) for_dealloc_allocatable
  -> EXTERN: (516,7) for_dealloc_allocatable
  -> EXTERN: (517,7) for_dealloc_allocatable
  -> EXTERN: (518,7) for_dealloc_allocatable
  -> EXTERN: (519,7) for_dealloc_allocatable
  -> EXTERN: (520,7) for_dealloc_allocatable
  -> EXTERN: (521,7) for_dealloc_allocatable
  -> EXTERN: (522,7) for_dealloc_allocatable
  -> EXTERN: (523,7) for_dealloc_allocatable
  -> EXTERN: (524,7) for_dealloc_allocatable
  -> EXTERN: (525,7) for_dealloc_allocatable
  -> EXTERN: (526,7) for_dealloc_allocatable
  -> EXTERN: (527,7) for_dealloc_allocatable
  -> EXTERN: (528,7) for_dealloc_allocatable
  -> EXTERN: (529,7) for_dealloc_allocatable
  -> EXTERN: (530,7) for_dealloc_allocatable
  -> EXTERN: (531,7) for_dealloc_allocatable
  -> EXTERN: (532,7) for_dealloc_allocatable
  -> EXTERN: (533,7) for_dealloc_allocatable
  -> EXTERN: (535,7) for_write_seq_lis_xmit
  -> EXTERN: (535,7) for_write_seq_lis
  -> EXTERN: (536,7) for_write_seq_lis_xmit
  -> EXTERN: (536,7) for_write_seq_lis
  -> EXTERN: (537,7) for_write_seq_lis_xmit
  -> EXTERN: (537,7) for_write_seq_lis
  -> EXTERN: (538,7) for_write_seq_lis_xmit
  -> EXTERN: (538,7) for_write_seq_lis_xmit
  -> EXTERN: (538,7) for_write_seq_lis_xmit
  -> EXTERN: (538,7) for_write_seq_lis
  -> EXTERN: (539,7) for_write_seq_lis_xmit
  -> EXTERN: (539,7) for_write_seq_lis_xmit
  -> EXTERN: (539,7) for_write_seq_lis_xmit
  -> EXTERN: (539,7) for_write_seq_lis
  -> EXTERN: (541,7) for_dealloc_allocatable
  -> EXTERN: (542,7) for_dealloc_allocatable
  -> EXTERN: (543,7) for_dealloc_allocatable
  -> EXTERN: (545,7) for_stop_core


    Report from: OpenMP optimizations [openmp]

ffKernel.f90(63:7-63:7):OMP:MAIN__:  OpenMP DEFINED REGION WAS PARALLELIZED
ffKernel.f90(203:7-203:7):OMP:MAIN__:  OpenMP DEFINED LOOP WAS PARALLELIZED
ffKernel.f90(270:7-270:7):OMP:MAIN__:  OpenMP DEFINED LOOP WAS PARALLELIZED
ffKernel.f90(300:7-300:7):OMP:MAIN__:  OpenMP DEFINED LOOP WAS PARALLELIZED
ffKernel.f90(351:7-351:7):OMP:MAIN__:  OpenMP DEFINED LOOP WAS PARALLELIZED
ffKernel.f90(431:7-431:7):OMP:MAIN__:  OpenMP DEFINED LOOP WAS PARALLELIZED
ffKernel.f90(474:7-474:7):OMP:MAIN__:  OpenMP DEFINED LOOP WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at ffKernel.f90(100,7)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=3
LOOP END

LOOP BEGIN at ffKernel.f90(100,7)
   remark #15388: vectorization support: reference VCOUL(:) has aligned access
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.833
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 3.430 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ffKernel.f90(100,7)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference VCOUL(:) has aligned access
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 3.333
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ffKernel.f90(100,7)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ffKernel.f90(104,7)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=7
LOOP END

LOOP BEGIN at ffKernel.f90(104,7)
   remark #15388: vectorization support: reference EKQ(ijk,1) has aligned access   [ ffKernel.f90(105,9) ]
   remark #15305: vectorization support: vector length 8
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.889
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 7 
   remark #15477: vector cost: 1.120 
   remark #15478: estimated potential speedup: 4.950 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ffKernel.f90(104,7)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference EKQ(ijk,1) has aligned access   [ ffKernel.f90(105,9) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 2.167
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ffKernel.f90(104,7)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ffKernel.f90(112,7)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ffKernel.f90(112,7)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at ffKernel.f90(112,7)
      remark #15388: vectorization support: reference AQSMTEMP(:,:) has aligned access
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.833
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 1.500 
      remark #15478: estimated potential speedup: 1.930 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at ffKernel.f90(112,7)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at ffKernel.f90(113,7)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ffKernel.f90(113,7)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at ffKernel.f90(113,7)
      remark #15388: vectorization support: reference AQSNTEMP(:,:) has aligned access
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.833
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 1.500 
      remark #15478: estimated potential speedup: 1.930 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at ffKernel.f90(113,7)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at ffKernel.f90(117,7)
   remark #25101: Loop Interchange not done due to: Original Order seems proper
   remark #25452: Original Order found to be proper, but by a close margin
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ffKernel.f90(117,7)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ffKernel.f90(117,7)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at ffKernel.f90(117,7)
         remark #15388: vectorization support: reference I_EPSR_ARRAY(:,:,:) has aligned access
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 4
         remark #15309: vectorization support: normalized vectorization overhead 0.833
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 3 
         remark #15477: vector cost: 1.500 
         remark #15478: estimated potential speedup: 1.930 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at ffKernel.f90(117,7)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ffKernel.f90(119,7)
   remark #25101: Loop Interchange not done due to: Original Order seems proper
   remark #25452: Original Order found to be proper, but by a close margin
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ffKernel.f90(119,7)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ffKernel.f90(119,7)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at ffKernel.f90(119,7)
         remark #15388: vectorization support: reference I_EPSA_ARRAY(:,:,:) has aligned access
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 4
         remark #15309: vectorization support: normalized vectorization overhead 0.833
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 3 
         remark #15477: vector cost: 1.500 
         remark #15478: estimated potential speedup: 1.930 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at ffKernel.f90(119,7)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ffKernel.f90(130,7)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=7
LOOP END

LOOP BEGIN at ffKernel.f90(130,7)
   remark #15388: vectorization support: reference DFREQGRID(ijk) has aligned access   [ ffKernel.f90(131,9) ]
   remark #15305: vectorization support: vector length 8
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.889
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 7 
   remark #15477: vector cost: 1.120 
   remark #15478: estimated potential speedup: 4.950 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ffKernel.f90(130,7)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference DFREQGRID(ijk) has aligned access   [ ffKernel.f90(131,9) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 2.167
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ffKernel.f90(130,7)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ffKernel.f90(138,60)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ ffKernel.f90(142,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between PREF(ifreq) (138:11) and PREF(ifreq-1) (140:11)
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at ffKernel.f90(138,60)
<Remainder>
LOOP END

LOOP BEGIN at ffKernel.f90(147,7)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at ffKernel.f90(147,7)
   remark #15388: vectorization support: reference DFREQBRD(:) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.833
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.930 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ffKernel.f90(147,7)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ffKernel.f90(150,7)
   remark #25408: memset generated
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at ffKernel.f90(150,7)
      remark #15388: vectorization support: reference ASXDTEMP(:) has aligned access
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 1
      remark #15399: vectorization support: unroll factor set to 2
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 3.000 
      remark #15478: estimated potential speedup: 1.000 
      remark #15488: --- end vector cost summary ---
      remark #25439: unrolled with remainder by 2  
      remark #25015: Estimate of max trip count of loop=6
   LOOP END

   LOOP BEGIN at ffKernel.f90(150,7)
   <Remainder>
      remark #25015: Estimate of max trip count of loop=6
   LOOP END
LOOP END

LOOP BEGIN at ffKernel.f90(152,7)
   remark #25408: memset generated
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at ffKernel.f90(152,7)
      remark #15388: vectorization support: reference ACHDTEMP(:) has aligned access
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 1
      remark #15399: vectorization support: unroll factor set to 2
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 3.000 
      remark #15478: estimated potential speedup: 1.000 
      remark #15488: --- end vector cost summary ---
      remark #25439: unrolled with remainder by 2  
      remark #25015: Estimate of max trip count of loop=6
   LOOP END

   LOOP BEGIN at ffKernel.f90(152,7)
   <Remainder>
      remark #25015: Estimate of max trip count of loop=6
   LOOP END
LOOP END

LOOP BEGIN at ffKernel.f90(154,7)
   remark #25408: memset generated
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at ffKernel.f90(154,7)
      remark #15388: vectorization support: reference ACHDTEMP_COR(:) has aligned access
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 1
      remark #15399: vectorization support: unroll factor set to 2
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 3.000 
      remark #15478: estimated potential speedup: 1.000 
      remark #15488: --- end vector cost summary ---
      remark #25439: unrolled with remainder by 2  
      remark #25015: Estimate of max trip count of loop=6
   LOOP END

   LOOP BEGIN at ffKernel.f90(154,7)
   <Remainder>
      remark #25015: Estimate of max trip count of loop=6
   LOOP END
LOOP END

LOOP BEGIN at ffKernel.f90(156,7)
   remark #25408: memset generated
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at ffKernel.f90(156,7)
      remark #15388: vectorization support: reference ACHDTEMP_CORB(:) has aligned access
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 1
      remark #15399: vectorization support: unroll factor set to 2
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 3.000 
      remark #15478: estimated potential speedup: 1.000 
      remark #15488: --- end vector cost summary ---
      remark #25439: unrolled with remainder by 2  
      remark #25015: Estimate of max trip count of loop=6
   LOOP END

   LOOP BEGIN at ffKernel.f90(156,7)
   <Remainder>
      remark #25015: Estimate of max trip count of loop=6
   LOOP END
LOOP END

LOOP BEGIN at ffKernel.f90(158,7)
   remark #25408: memset generated
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at ffKernel.f90(158,7)
      remark #15388: vectorization support: reference ACH2DTEMP(:) has aligned access
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 1
      remark #15399: vectorization support: unroll factor set to 2
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 3.000 
      remark #15478: estimated potential speedup: 1.000 
      remark #15488: --- end vector cost summary ---
      remark #25439: unrolled with remainder by 2  
      remark #25015: Estimate of max trip count of loop=6
   LOOP END

   LOOP BEGIN at ffKernel.f90(158,7)
   <Remainder>
      remark #25015: Estimate of max trip count of loop=6
   LOOP END
LOOP END

LOOP BEGIN at ffKernel.f90(160,7)
   remark #25408: memset generated
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at ffKernel.f90(160,7)
      remark #15388: vectorization support: reference SCHDI(:) has aligned access
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 1
      remark #15399: vectorization support: unroll factor set to 2
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 3.000 
      remark #15478: estimated potential speedup: 1.000 
      remark #15488: --- end vector cost summary ---
      remark #25439: unrolled with remainder by 2  
      remark #25015: Estimate of max trip count of loop=6
   LOOP END

   LOOP BEGIN at ffKernel.f90(160,7)
   <Remainder>
      remark #25015: Estimate of max trip count of loop=6
   LOOP END
LOOP END

LOOP BEGIN at ffKernel.f90(162,7)
   remark #25408: memset generated
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at ffKernel.f90(162,7)
      remark #15388: vectorization support: reference SCHDI_COR(:) has aligned access
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 1
      remark #15399: vectorization support: unroll factor set to 2
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 3.000 
      remark #15478: estimated potential speedup: 1.000 
      remark #15488: --- end vector cost summary ---
      remark #25439: unrolled with remainder by 2  
      remark #25015: Estimate of max trip count of loop=6
   LOOP END

   LOOP BEGIN at ffKernel.f90(162,7)
   <Remainder>
      remark #25015: Estimate of max trip count of loop=6
   LOOP END
LOOP END

LOOP BEGIN at ffKernel.f90(164,7)
   remark #25408: memset generated
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at ffKernel.f90(164,7)
      remark #15388: vectorization support: reference SCHDI_CORB(:) has aligned access
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 1
      remark #15399: vectorization support: unroll factor set to 2
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 3.000 
      remark #15478: estimated potential speedup: 1.000 
      remark #15488: --- end vector cost summary ---
      remark #25439: unrolled with remainder by 2  
      remark #25015: Estimate of max trip count of loop=6
   LOOP END

   LOOP BEGIN at ffKernel.f90(164,7)
   <Remainder>
      remark #25015: Estimate of max trip count of loop=6
   LOOP END
LOOP END

LOOP BEGIN at ffKernel.f90(166,7)
   remark #25408: memset generated
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at ffKernel.f90(166,7)
      remark #15388: vectorization support: reference SCH2DI(:) has aligned access
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 1
      remark #15399: vectorization support: unroll factor set to 2
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 3.000 
      remark #15478: estimated potential speedup: 1.000 
      remark #15488: --- end vector cost summary ---
      remark #25439: unrolled with remainder by 2  
      remark #25015: Estimate of max trip count of loop=6
   LOOP END

   LOOP BEGIN at ffKernel.f90(166,7)
   <Remainder>
      remark #25015: Estimate of max trip count of loop=6
   LOOP END
LOOP END

LOOP BEGIN at ffKernel.f90(168,7)
   remark #25408: memset generated
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at ffKernel.f90(168,7)
      remark #15388: vectorization support: reference SSXDI(:) has aligned access
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 1
      remark #15399: vectorization support: unroll factor set to 2
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 3.000 
      remark #15478: estimated potential speedup: 1.000 
      remark #15488: --- end vector cost summary ---
      remark #25439: unrolled with remainder by 2  
      remark #25015: Estimate of max trip count of loop=6
   LOOP END

   LOOP BEGIN at ffKernel.f90(168,7)
   <Remainder>
      remark #25015: Estimate of max trip count of loop=6
   LOOP END
LOOP END

LOOP BEGIN at ffKernel.f90(171,7)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ffKernel.f90(171,7)
      remark #15388: vectorization support: reference WXI(:) has aligned access
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15300: LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 1.500 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at ffKernel.f90(171,7)
   <Remainder loop for vectorization>
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at ffKernel.f90(173,7)
   remark #15306: loop was not vectorized: inner loop was transformed to memset or memcpy

   LOOP BEGIN at ffKernel.f90(173,7)
      remark #25408: memset generated
      remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

      LOOP BEGIN at ffKernel.f90(173,7)
         remark #15389: vectorization support: reference SCHDT_MATRIX(:,:) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15305: vectorization support: vector length 1
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.250
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 3 
         remark #15477: vector cost: 6.000 
         remark #15478: estimated potential speedup: 0.460 
         remark #15488: --- end vector cost summary ---
         remark #25439: unrolled with remainder by 2  
         remark #25015: Estimate of max trip count of loop=6
      LOOP END

      LOOP BEGIN at ffKernel.f90(173,7)
      <Remainder>
         remark #25015: Estimate of max trip count of loop=6
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ffKernel.f90(175,7)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=7
LOOP END

LOOP BEGIN at ffKernel.f90(175,7)
   remark #15389: vectorization support: reference INV_IGP_INDEX(ig) has unaligned access   [ ffKernel.f90(176,9) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 3.667
   remark #15300: LOOP WAS VECTORIZED
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 2 
   remark #15477: vector cost: 0.370 
   remark #15478: estimated potential speedup: 4.190 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ffKernel.f90(175,7)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ffKernel.f90(179,7)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=7
LOOP END

LOOP BEGIN at ffKernel.f90(179,7)
   remark #15389: vectorization support: reference INDINV(ig) has unaligned access   [ ffKernel.f90(180,9) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 3.667
   remark #15300: LOOP WAS VECTORIZED
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 2 
   remark #15477: vector cost: 0.370 
   remark #15478: estimated potential speedup: 4.190 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ffKernel.f90(179,7)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ffKernel.f90(191,7)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ffKernel.f90(224,9)
      remark #25408: memset generated
      remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

      LOOP BEGIN at ffKernel.f90(224,9)
         remark #15388: vectorization support: reference SSXDI(:) has aligned access
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15305: vectorization support: vector length 1
         remark #15399: vectorization support: unroll factor set to 2
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 3 
         remark #15477: vector cost: 3.000 
         remark #15478: estimated potential speedup: 1.000 
         remark #15488: --- end vector cost summary ---
         remark #25439: unrolled with remainder by 2  
         remark #25015: Estimate of max trip count of loop=6
      LOOP END

      LOOP BEGIN at ffKernel.f90(224,9)
      <Remainder>
         remark #25015: Estimate of max trip count of loop=6
      LOOP END
   LOOP END

   LOOP BEGIN at ffKernel.f90(228,9)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ffKernel.f90(237,17)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=7
      LOOP END

      LOOP BEGIN at ffKernel.f90(237,17)
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 0.723
         remark #15300: LOOP WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15456: masked unaligned unit stride loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 13 
         remark #15477: vector cost: 11.750 
         remark #15478: estimated potential speedup: 1.080 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at ffKernel.f90(238,19)
         remark #25460: No loop optimizations reported
      LOOP END

      LOOP BEGIN at ffKernel.f90(238,19)
         remark #25460: No loop optimizations reported
      LOOP END

      LOOP BEGIN at ffKernel.f90(237,17)
      <Remainder loop for vectorization>
      LOOP END

      LOOP BEGIN at ffKernel.f90(247,21)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=7
      LOOP END

      LOOP BEGIN at ffKernel.f90(247,21)
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 0.723
         remark #15300: LOOP WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15456: masked unaligned unit stride loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 15 
         remark #15477: vector cost: 11.750 
         remark #15478: estimated potential speedup: 1.240 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at ffKernel.f90(248,19)
         remark #25460: No loop optimizations reported
      LOOP END

      LOOP BEGIN at ffKernel.f90(248,19)
         remark #25460: No loop optimizations reported
      LOOP END

      LOOP BEGIN at ffKernel.f90(247,21)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ffKernel.f90(334,10)
   remark #15306: loop was not vectorized: inner loop was transformed to memset or memcpy

   LOOP BEGIN at ffKernel.f90(334,10)
      remark #25408: memset generated
      remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

      LOOP BEGIN at ffKernel.f90(334,10)
         remark #15389: vectorization support: reference SCHDT_MATRIX(:,:) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15305: vectorization support: vector length 1
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.250
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 3 
         remark #15477: vector cost: 6.000 
         remark #15478: estimated potential speedup: 0.460 
         remark #15488: --- end vector cost summary ---
         remark #25439: unrolled with remainder by 2  
         remark #25015: Estimate of max trip count of loop=6
      LOOP END

      LOOP BEGIN at ffKernel.f90(334,10)
      <Remainder>
         remark #25015: Estimate of max trip count of loop=6
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ffKernel.f90(342,7)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ffKernel.f90(346,9)
      remark #25408: memset generated
      remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

      LOOP BEGIN at ffKernel.f90(346,9)
         remark #15388: vectorization support: reference SCHDI(:) has aligned access
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15305: vectorization support: vector length 1
         remark #15399: vectorization support: unroll factor set to 2
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 3 
         remark #15477: vector cost: 3.000 
         remark #15478: estimated potential speedup: 1.000 
         remark #15488: --- end vector cost summary ---
         remark #25439: unrolled with remainder by 2  
         remark #25015: Estimate of max trip count of loop=6
      LOOP END

      LOOP BEGIN at ffKernel.f90(346,9)
      <Remainder>
         remark #25015: Estimate of max trip count of loop=6
      LOOP END
   LOOP END

   LOOP BEGIN at ffKernel.f90(347,9)
      remark #25408: memset generated
      remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

      LOOP BEGIN at ffKernel.f90(347,9)
         remark #15388: vectorization support: reference SCHDI_COR(:) has aligned access
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15305: vectorization support: vector length 1
         remark #15399: vectorization support: unroll factor set to 2
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 3 
         remark #15477: vector cost: 3.000 
         remark #15478: estimated potential speedup: 1.000 
         remark #15488: --- end vector cost summary ---
         remark #25439: unrolled with remainder by 2  
         remark #25015: Estimate of max trip count of loop=6
      LOOP END

      LOOP BEGIN at ffKernel.f90(347,9)
      <Remainder>
         remark #25015: Estimate of max trip count of loop=6
      LOOP END
   LOOP END

   LOOP BEGIN at ffKernel.f90(348,9)
      remark #25408: memset generated
      remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

      LOOP BEGIN at ffKernel.f90(348,9)
         remark #15388: vectorization support: reference SCHDI_CORB(:) has aligned access
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15305: vectorization support: vector length 1
         remark #15399: vectorization support: unroll factor set to 2
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 3 
         remark #15477: vector cost: 3.000 
         remark #15478: estimated potential speedup: 1.000 
         remark #15488: --- end vector cost summary ---
         remark #25439: unrolled with remainder by 2  
         remark #25015: Estimate of max trip count of loop=6
      LOOP END

      LOOP BEGIN at ffKernel.f90(348,9)
      <Remainder>
         remark #25015: Estimate of max trip count of loop=6
      LOOP END
   LOOP END

   LOOP BEGIN at ffKernel.f90(349,9)
      remark #25408: memset generated
      remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

      LOOP BEGIN at ffKernel.f90(349,9)
         remark #15388: vectorization support: reference SCH2DI(:) has aligned access
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15305: vectorization support: vector length 1
         remark #15399: vectorization support: unroll factor set to 2
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 3 
         remark #15477: vector cost: 3.000 
         remark #15478: estimated potential speedup: 1.000 
         remark #15488: --- end vector cost summary ---
         remark #25439: unrolled with remainder by 2  
         remark #25015: Estimate of max trip count of loop=6
      LOOP END

      LOOP BEGIN at ffKernel.f90(349,9)
      <Remainder>
         remark #25015: Estimate of max trip count of loop=6
      LOOP END
   LOOP END

   LOOP BEGIN at ffKernel.f90(412,9)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ffKernel.f90(417,15)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=7
      LOOP END

      LOOP BEGIN at ffKernel.f90(417,15)
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 0.723
         remark #15300: LOOP WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15456: masked unaligned unit stride loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 13 
         remark #15477: vector cost: 11.750 
         remark #15478: estimated potential speedup: 1.080 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at ffKernel.f90(418,17)
         remark #25460: No loop optimizations reported
      LOOP END

      LOOP BEGIN at ffKernel.f90(422,15)
         remark #25460: No loop optimizations reported
      LOOP END

      LOOP BEGIN at ffKernel.f90(417,15)
      <Remainder loop for vectorization>
      LOOP END

      LOOP BEGIN at ffKernel.f90(461,15)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=7
      LOOP END

      LOOP BEGIN at ffKernel.f90(461,15)
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 0.723
         remark #15300: LOOP WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15456: masked unaligned unit stride loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 13 
         remark #15477: vector cost: 11.750 
         remark #15478: estimated potential speedup: 1.080 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at ffKernel.f90(462,17)
         remark #25460: No loop optimizations reported
      LOOP END

      LOOP BEGIN at ffKernel.f90(462,17)
         remark #25460: No loop optimizations reported
      LOOP END

      LOOP BEGIN at ffKernel.f90(461,15)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END

   LOOP BEGIN at ffKernel.f90(500,9)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at ffKernel.f90(500,9)
      remark #15389: vectorization support: reference ACHDTEMP(iw) has unaligned access   [ ffKernel.f90(502,11) ]
      remark #15389: vectorization support: reference ACHDTEMP(iw) has unaligned access   [ ffKernel.f90(502,26) ]
      remark #15389: vectorization support: reference SCHDI(iw) has unaligned access   [ ffKernel.f90(502,41) ]
      remark #15389: vectorization support: reference ACHDTEMP_COR(iw) has unaligned access   [ ffKernel.f90(503,11) ]
      remark #15389: vectorization support: reference ACHDTEMP_COR(iw) has unaligned access   [ ffKernel.f90(503,30) ]
      remark #15389: vectorization support: reference SCHDI_COR(iw) has unaligned access   [ ffKernel.f90(503,49) ]
      remark #15389: vectorization support: reference ACHDTEMP_CORB(iw) has unaligned access   [ ffKernel.f90(504,11) ]
      remark #15389: vectorization support: reference ACHDTEMP_CORB(iw) has unaligned access   [ ffKernel.f90(504,31) ]
      remark #15389: vectorization support: reference SCHDI_CORB(iw) has unaligned access   [ ffKernel.f90(504,51) ]
      remark #15389: vectorization support: reference ACH2DTEMP(iw) has unaligned access   [ ffKernel.f90(505,11) ]
      remark #15389: vectorization support: reference ACH2DTEMP(iw) has unaligned access   [ ffKernel.f90(505,27) ]
      remark #15389: vectorization support: reference SCH2DI(iw) has unaligned access   [ ffKernel.f90(505,43) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.606
      remark #15300: LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 8 
      remark #15451: unmasked unaligned unit stride stores: 4 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 25 
      remark #15477: vector cost: 16.500 
      remark #15478: estimated potential speedup: 1.490 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at ffKernel.f90(500,9)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference ACHDTEMP(iw) has unaligned access   [ ffKernel.f90(502,11) ]
      remark #15389: vectorization support: reference ACHDTEMP(iw) has unaligned access   [ ffKernel.f90(502,26) ]
      remark #15389: vectorization support: reference SCHDI(iw) has unaligned access   [ ffKernel.f90(502,41) ]
      remark #15389: vectorization support: reference ACHDTEMP_COR(iw) has unaligned access   [ ffKernel.f90(503,11) ]
      remark #15389: vectorization support: reference ACHDTEMP_COR(iw) has unaligned access   [ ffKernel.f90(503,30) ]
      remark #15389: vectorization support: reference SCHDI_COR(iw) has unaligned access   [ ffKernel.f90(503,49) ]
      remark #15389: vectorization support: reference ACHDTEMP_CORB(iw) has unaligned access   [ ffKernel.f90(504,11) ]
      remark #15389: vectorization support: reference ACHDTEMP_CORB(iw) has unaligned access   [ ffKernel.f90(504,31) ]
      remark #15389: vectorization support: reference SCHDI_CORB(iw) has unaligned access   [ ffKernel.f90(504,51) ]
      remark #15389: vectorization support: reference ACH2DTEMP(iw) has unaligned access   [ ffKernel.f90(505,11) ]
      remark #15389: vectorization support: reference ACH2DTEMP(iw) has unaligned access   [ ffKernel.f90(505,27) ]
      remark #15389: vectorization support: reference SCH2DI(iw) has unaligned access   [ ffKernel.f90(505,43) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 1
      remark #15309: vectorization support: normalized vectorization overhead 0.958
   LOOP END
LOOP END

LOOP BEGIN at ffKernel.f90(205,11)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ ffKernel.f90(217,13) ]
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ffKernel.f90(214,13)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at ffKernel.f90(214,13)
      remark #15389: vectorization support: reference AQSNTEMP(ig,n1) has unaligned access   [ ffKernel.f90(215,37) ]
      remark #15389: vectorization support: reference I_EPSR_ARRAY(ig,my_igp,1) has unaligned access   [ ffKernel.f90(215,79) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.338
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 13 
      remark #15477: vector cost: 10.000 
      remark #15478: estimated potential speedup: 1.280 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at ffKernel.f90(214,13)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at ffKernel.f90(302,15)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ ffKernel.f90(317,17) ]
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ffKernel.f90(311,17)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at ffKernel.f90(311,17)
      remark #15389: vectorization support: reference AQSNTEMP(ig,n1) has unaligned access   [ ffKernel.f90(315,39) ]
      remark #15389: vectorization support: reference I_EPSA_ARRAY(ig,my_igp,ifreq) has unaligned access   [ ffKernel.f90(312,26) ]
      remark #15389: vectorization support: reference I_EPSA_ARRAY(ig,my_igp,ifreq+1) has unaligned access   [ ffKernel.f90(313,21) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 0.692
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 3 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 26 
      remark #15477: vector cost: 13.000 
      remark #15478: estimated potential speedup: 1.950 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at ffKernel.f90(311,17)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at ffKernel.f90(272,15)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ ffKernel.f90(287,17) ]
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ffKernel.f90(281,17)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at ffKernel.f90(281,17)
      remark #15389: vectorization support: reference AQSNTEMP(ig,n1) has unaligned access   [ ffKernel.f90(285,39) ]
      remark #15389: vectorization support: reference I_EPSR_ARRAY(ig,my_igp,ifreq) has unaligned access   [ ffKernel.f90(282,26) ]
      remark #15389: vectorization support: reference I_EPSR_ARRAY(ig,my_igp,ifreq+1) has unaligned access   [ ffKernel.f90(283,19) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 0.692
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 3 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 26 
      remark #15477: vector cost: 13.000 
      remark #15478: estimated potential speedup: 1.950 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at ffKernel.f90(281,17)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at ffKernel.f90(355,9)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ffKernel.f90(379,15)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at ffKernel.f90(379,15)
      remark #25084: Preprocess Loopnests: Moving Out Store    [ ffKernel.f90(380,17) ]
      remark #15389: vectorization support: reference at (381:17) has unaligned access   [ ffKernel.f90(381,17) ]
      remark #15389: vectorization support: reference at (381:29) has unaligned access   [ ffKernel.f90(381,29) ]
      remark #15389: vectorization support: reference at (382:17) has unaligned access   [ ffKernel.f90(382,17) ]
      remark #15389: vectorization support: reference at (382:34) has unaligned access   [ ffKernel.f90(382,34) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 0.178
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15451: unmasked unaligned unit stride stores: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 97 
      remark #15477: vector cost: 43.500 
      remark #15478: estimated potential speedup: 2.180 
      remark #15486: divides: 2 
      remark #15487: type converts: 1 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at ffKernel.f90(379,15)
   <Remainder loop for vectorization>
   LOOP END

   LOOP BEGIN at ffKernel.f90(386,15)
   <Peeled loop for vectorization, Predicate Optimized v1>
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at ffKernel.f90(386,15)
   <Predicate Optimized v1>
      remark #25422: Invariant Condition at line 392 hoisted out of this loop
      remark #15389: vectorization support: reference at (391:17) has unaligned access   [ ffKernel.f90(391,17) ]
      remark #15389: vectorization support: reference at (391:30) has unaligned access   [ ffKernel.f90(391,30) ]
      remark #15389: vectorization support: reference at (402:17) has unaligned access   [ ffKernel.f90(402,17) ]
      remark #15389: vectorization support: reference at (402:33) has unaligned access   [ ffKernel.f90(402,33) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 0.156
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15451: unmasked unaligned unit stride stores: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 388 
      remark #15477: vector cost: 80.000 
      remark #15478: estimated potential speedup: 4.600 
      remark #15482: vectorized math library calls: 2 
      remark #15486: divides: 2 
      remark #15487: type converts: 5 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at ffKernel.f90(386,15)
   <Remainder loop for vectorization, Predicate Optimized v1>
   LOOP END

   LOOP BEGIN at ffKernel.f90(386,15)
   <Peeled loop for vectorization, Predicate Optimized v2>
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at ffKernel.f90(386,15)
   <Predicate Optimized v2>
      remark #15389: vectorization support: reference at (391:17) has unaligned access   [ ffKernel.f90(391,17) ]
      remark #15389: vectorization support: reference at (391:30) has unaligned access   [ ffKernel.f90(391,30) ]
      remark #15389: vectorization support: reference at (402:17) has unaligned access   [ ffKernel.f90(402,17) ]
      remark #15389: vectorization support: reference at (402:33) has unaligned access   [ ffKernel.f90(402,33) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 0.221
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15451: unmasked unaligned unit stride stores: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 223 
      remark #15477: vector cost: 49.750 
      remark #15478: estimated potential speedup: 4.270 
      remark #15482: vectorized math library calls: 1 
      remark #15486: divides: 1 
      remark #15487: type converts: 3 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at ffKernel.f90(386,15)
   <Remainder loop for vectorization, Predicate Optimized v2>
   LOOP END
LOOP END

LOOP BEGIN at ffKernel.f90(476,13)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ ffKernel.f90(490,15) ]
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ffKernel.f90(485,15)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at ffKernel.f90(485,15)
      remark #15389: vectorization support: reference AQSNTEMP(ig,n1) has unaligned access   [ ffKernel.f90(488,37) ]
      remark #15389: vectorization support: reference I_EPSR_ARRAY(ig,my_igp,ifreq) has unaligned access   [ ffKernel.f90(486,33) ]
      remark #15389: vectorization support: reference I_EPSA_ARRAY(ig,my_igp,ifreq) has unaligned access   [ ffKernel.f90(486,63) ]
      remark #15389: vectorization support: reference I_EPSR_ARRAY(ig,my_igp,ifreq+1) has unaligned access   [ ffKernel.f90(487,25) ]
      remark #15389: vectorization support: reference I_EPSA_ARRAY(ig,my_igp,ifreq+1) has unaligned access   [ ffKernel.f90(487,57) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 0.525
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 5 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 35 
      remark #15477: vector cost: 20.000 
      remark #15478: estimated potential speedup: 1.720 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at ffKernel.f90(485,15)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at ffKernel.f90(433,13)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ ffKernel.f90(447,15) ]
   remark #25084: Preprocess Loopnests: Moving Out Store    [ ffKernel.f90(450,17) ]
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ffKernel.f90(442,15)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at ffKernel.f90(442,15)
      remark #15389: vectorization support: reference AQSNTEMP(ig,n1) has unaligned access   [ ffKernel.f90(445,37) ]
      remark #15389: vectorization support: reference I_EPSR_ARRAY(ig,my_igp,ifreq) has unaligned access   [ ffKernel.f90(443,25) ]
      remark #15389: vectorization support: reference I_EPSA_ARRAY(ig,my_igp,ifreq) has unaligned access   [ ffKernel.f90(443,55) ]
      remark #15389: vectorization support: reference I_EPSR_ARRAY(ig,my_igp,ifreq+1) has unaligned access   [ ffKernel.f90(444,25) ]
      remark #15389: vectorization support: reference I_EPSA_ARRAY(ig,my_igp,ifreq+1) has unaligned access   [ ffKernel.f90(444,57) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 0.656
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 5 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 31 
      remark #15477: vector cost: 16.000 
      remark #15478: estimated potential speedup: 1.890 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at ffKernel.f90(442,15)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

ffKernel.f90(381,73):remark #34046: complex divide implemented using x87 instructions to maintain precision.
ffKernel.f90(381,73):remark #34048: consider using complex-limited-range option to boost run time performance.
ffKernel.f90(382,83):remark #34046: complex divide implemented using x87 instructions to maintain precision.
ffKernel.f90(382,83):remark #34048: consider using complex-limited-range option to boost run time performance.
ffKernel.f90(381,73):remark #34046: complex divide implemented using x87 instructions to maintain precision.
ffKernel.f90(381,73):remark #34048: consider using complex-limited-range option to boost run time performance.
ffKernel.f90(381,73):remark #34046: complex divide implemented using x87 instructions to maintain precision.
ffKernel.f90(381,73):remark #34048: consider using complex-limited-range option to boost run time performance.
ffKernel.f90(382,83):remark #34046: complex divide implemented using x87 instructions to maintain precision.
ffKernel.f90(382,83):remark #34048: consider using complex-limited-range option to boost run time performance.
ffKernel.f90(382,83):remark #34046: complex divide implemented using x87 instructions to maintain precision.
ffKernel.f90(382,83):remark #34048: consider using complex-limited-range option to boost run time performance.
ffKernel.f90(381,73):remark #34046: complex divide implemented using x87 instructions to maintain precision.
ffKernel.f90(381,73):remark #34048: consider using complex-limited-range option to boost run time performance.
ffKernel.f90(382,83):remark #34046: complex divide implemented using x87 instructions to maintain precision.
ffKernel.f90(382,83):remark #34048: consider using complex-limited-range option to boost run time performance.
ffKernel.f90(150,7):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
ffKernel.f90(150,7):remark #34026: call to memset implemented as a call to optimized library version
ffKernel.f90(152,7):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
ffKernel.f90(152,7):remark #34026: call to memset implemented as a call to optimized library version
ffKernel.f90(154,7):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
ffKernel.f90(154,7):remark #34026: call to memset implemented as a call to optimized library version
ffKernel.f90(156,7):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
ffKernel.f90(156,7):remark #34026: call to memset implemented as a call to optimized library version
ffKernel.f90(158,7):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
ffKernel.f90(158,7):remark #34026: call to memset implemented as a call to optimized library version
ffKernel.f90(160,7):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
ffKernel.f90(160,7):remark #34026: call to memset implemented as a call to optimized library version
ffKernel.f90(162,7):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
ffKernel.f90(162,7):remark #34026: call to memset implemented as a call to optimized library version
ffKernel.f90(164,7):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
ffKernel.f90(164,7):remark #34026: call to memset implemented as a call to optimized library version
ffKernel.f90(166,7):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
ffKernel.f90(166,7):remark #34026: call to memset implemented as a call to optimized library version
ffKernel.f90(168,7):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
ffKernel.f90(168,7):remark #34026: call to memset implemented as a call to optimized library version
ffKernel.f90(171,7):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
ffKernel.f90(171,7):remark #34026: call to memset implemented as a call to optimized library version
ffKernel.f90(173,7):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
ffKernel.f90(173,7):remark #34026: call to memset implemented as a call to optimized library version
ffKernel.f90(224,9):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
ffKernel.f90(224,9):remark #34026: call to memset implemented as a call to optimized library version
ffKernel.f90(334,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
ffKernel.f90(334,10):remark #34026: call to memset implemented as a call to optimized library version
ffKernel.f90(346,9):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
ffKernel.f90(346,9):remark #34026: call to memset implemented as a call to optimized library version
ffKernel.f90(347,9):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
ffKernel.f90(347,9):remark #34026: call to memset implemented as a call to optimized library version
ffKernel.f90(348,9):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
ffKernel.f90(348,9):remark #34026: call to memset implemented as a call to optimized library version
ffKernel.f90(349,9):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
ffKernel.f90(349,9):remark #34026: call to memset implemented as a call to optimized library version
ffKernel.f90(18,9):remark #34051: REGISTER ALLOCATION : [MAIN__] ffKernel.f90:18

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   37[ rax rdx rcx rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        
    Routine temporaries
        Total         :    5458
            Global    :    1145
            Local     :    4313
        Regenerable   :    1107
        Spilled       :     231
        
    Routine stack
        Variables     :    1692 bytes*
            Reads     :     229 [6.31e+03 ~ 3.6%]
            Writes    :     261 [7.27e+03 ~ 4.1%]
        Spills        :    2512 bytes*
            Reads     :     478 [1.06e+04 ~ 6.0%]
            Writes    :     341 [3.11e+03 ~ 1.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: TIMGET

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (TIMGET) [2/2=100.0%] ffKernel.f90(549,12)
  -> EXTERN: (554,8) for_date_and_time


    Report from: Code generation optimizations [cg]

ffKernel.f90(549,12):remark #34051: REGISTER ALLOCATION : [timget_] ffKernel.f90:549

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rsi rdi r8-r9 r14 zmm0-zmm5]
        
    Routine temporaries
        Total         :      25
            Global    :       7
            Local     :      18
        Regenerable   :       8
        Spilled       :       1
        
    Routine stack
        Variables     :      32 bytes*
            Reads     :       5 [5.00e+00 ~ 10.6%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

    Report from: Interprocedural optimizations [ipo]

INLINING FOOTNOTES:

<1> The compiler's heuristics predict that it is not profitable to inline the
    call.  Add "!DIR$ATTRIBUTES FORCEINLINE" to the declaration of the called 
    subprogram, or add "!DIR$ FORCEINLINE" before the call site.

